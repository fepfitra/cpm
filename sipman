#!/bin/bash

printHelp() {
  echo "Usage: sipman [init|install|add <package>|remove <package>|list|update|help|selfdestroy]"
  echo ""
  echo "init              Initialize"
  echo "install           Install all packages"
  echo "add <package>     Add a package"
  echo "remove <package>  Remove a package"
  echo "list              List all packages"
  echo "update            Update all packages"
  echo "help              Show this help"
  echo "selfdestroy       Self-destroy this program"
}

if [ $# == 0 ]; then
  printHelp
  exit 1
fi

if [ $1 == "help" ]; then
  printHelp
  exit 1
fi

if [ $1 == "init" ]; then
  echo "Initializing..."
  echo "#fitrafep/sipman" > packages
  exit 0
fi

if [ $1 == "selfdestroy" ]; then
  echo "Self-destroying..."
  rm $0
  echo "Done, self-destroyed."
fi

if [ ! -f packages ]; then
  echo "No packages file found. Please run 'sipman init' first."
  exit 1
fi

if [ ! -d module ]; then
  echo "No module directory found. Please run 'sipman init' first."
  exit 1
fi

if [ $1 == "install" ] || [ $1 == "update" ]; then
  if [ ! -d module ]; then
    echo "No module directory found. Please run 'sipman init' first."
    exit 1
  fi

  if [ ! -f packages ]; then
    echo "No packages file found. Please run 'sipman init' first."
    exit 1
  fi
fi

if [ $1 == "add" ]; then
  if [ $# != 2 ]; then
    echo "Usage: $0 add <github_repo>"
    exit 1
  fi
  if [ $(grep -c $2 packages) -gt 0 ]; then
    echo "Package $2 already exists."
    exit 1
  fi
  echo "Adding $2..."
  echo $2 >> packages
  exit 0
fi


if [ $1 == "install" ]; then
  echo "Installing..."
  cat packages | while read line
  do
    if [[ $line == \#* ]]; then
      continue
    fi
    line_dir=$(echo $line | cut -d'/' -f2 | cut -d'.' -f1)
    echo "Installing $line_dir..."
    mkdir module/$line_dir 2>/dev/null
    git clone https://github.com/$line.git module/$line_dir
  done
fi

if [ $1 == "update" ]; then
  echo "Updating..."
  cd module
  cat ../packages | while read line
  do
    if [[ $line == \#* ]]; then
      continue
    fi
    echo "Updating $line..."
    line_dir=$(echo $line | cut -d'/' -f2 | cut -d'.' -f1)
    if [ ! -d $line_dir ]; then
      echo "Module $line_dir not found. Skipping..."
      continue
    fi
    git pull
  done
fi

if [ $1 == "remove" ]; then
  if [ $# != 2 ]; then
    echo "Usage: $0 remove <github_repo>"
    exit 1
  fi
  if [ $(grep -c $2 packages) -eq 0 ]; then
    echo "Package $2 not found."
    exit 1
  fi
  echo "Removing $2..."
  sed -i "/$2/d" packages
  line_dir=$(echo $2 | cut -d'/' -f2 | cut -d'.' -f1)
  rm -rf module/$line_dir
  exit 0
fi

if [ $1 == "list" ]; then
  echo "Listing packages..."
  cat packages | while read line
  do
    if [[ $line == \#* ]]; then
      continue
    fi
    echo $line
  done
  exit 0
fi

